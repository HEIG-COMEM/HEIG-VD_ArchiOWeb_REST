openapi: 3.0.3
info:
    title: REST API
    version: 1.0.0
    description: >-
        **A demonstration REST API developed with
        [Express](https://expressjs.com).**
servers:
    - url: 'http://localhost:3000/api/v1'

tags:
    - name: Auth
      description: Authentication management
    - name: Users
      description: User management

paths:
    /auth/signup:
        post:
            summary: Register a new user
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserData'
            responses:
                '201':
                    description: User created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '409':
                    description: User already exists
    /auth/login:
        post:
            summary: Authenticate a user
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                    format: password
                            required:
                                - email
                                - password
            responses:
                '200':
                    description: User authenticated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
    /auth/user:
        get:
            summary: Get the authenticated user
            tags:
                - Auth
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized
    /users:
        get:
            summary: Get Users
            tags:
                - Users
            description: Permet d'afficher les utilisateurs disponibles.
            parameters:
                - in: query
                  name: page
                  required: false
                  schema:
                      type: integer
                      example: 1
                  description: Numéro de page des résultats.
                - in: query
                  name: pageSize
                  required: false
                  schema:
                      type: integer
                      example: 10
                  description: Nombre d'éléments par page.
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Liste des utilisateurs
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity
    /user/{id}:
        get:
            summary: Get the user information
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Unique identifier of the user
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized
                '404':
                    description: User not found
        put:
            summary: Allows to modify the user giving every informations
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de l'utilisateur
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserData'
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity
        patch:
            summary: Allows to modify a user giving only the informations we want to change
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de l'utilisateur
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    example: 'John Doe'
                                    description: Nom de l'utilisateur.
                                email:
                                    type: string
                                    format: email
                                    example: 'john.doe@email.com'
                                role:
                                    type: string
                                    example: 'user'
                                profilePictureUrl:
                                    type: string
                                    example: 'default.jpg'
                                    description: URL de la photo de profil.
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

        delete:
            summary: Allows to delete a user
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de l'utilisateur
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User deleted
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'User successfully deleted'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '404':
                    description: User not found
                '422':
                    description: Unprocessable entity

    /publications:
        get:
            summary: Get publications
            tags:
                - Publications
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Publications retrieved
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        _id:
                                            type: string
                                            example: '12345'
                                        title:
                                            type: string
                                            example: 'Publication Title'
                                        content:
                                            type: string
                                            example: 'Content of the publication'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

        post:
            summary: Allows to create a new publication
            tags:
                - Publications
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                frontCamera:
                                    type: string
                                    format: uri
                                    example: 'https://example.com/front.jpg'
                                    description: URL de l'image prise avec la caméra frontale
                                backCamera:
                                    type: string
                                    format: uri
                                    example: 'https://example.com/back.jpg'
                                    description: URL de l'image prise avec la caméra arrière
                            required:
                                - frontCamera
                                - backCamera
            security:
                - bearerAuth: []
            responses:
                '201':
                    description: Publication created
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        example: '12345'
                                    userId:
                                        type: string
                                        example: '67890'
                                    frontCamera:
                                        type: string
                                        format: uri
                                        example: 'https://example.com/front.jpg'
                                    backCamera:
                                        type: string
                                        format: uri
                                        example: 'https://example.com/back.jpg'
                                    timestamp:
                                        type: string
                                        format: date-time
                                        example: '2024-10-30T13:39:08.348Z'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /publications/{id}:
        get:
            summary: Get the publications informations
            tags:
                - Publications
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Publication retrieved
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        type: string
                                        example: '12345'
                                    title:
                                        type: string
                                        example: 'Publication Title'
                                    content:
                                        type: string
                                        example: 'Content of the publication'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

        delete:
            summary: Allows to delete a publication
            tags:
                - Publications
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Publication deleted
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Publication successfully deleted'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /publications/{id}/comments:
        get:
            summary: Allows to get all the comments under a publication
            tags:
                - Comments
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Comments retrieved
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        _id:
                                            type: string
                                            example: '67890'
                                        userId:
                                            type: string
                                            example: '12345'
                                        publicationId:
                                            type: string
                                            example: '54321'
                                        content:
                                            type: string
                                            example: 'This is a comment'
                                        timestamp:
                                            type: string
                                            format: date-time
                                            example: '2024-10-30T13:39:08.348Z'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

        post:
            summary: Allows to create a new comment
            tags:
                - Comments
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    example: 'This is a comment'
            security:
                - bearerAuth: []
            responses:
                '201':
                    description: Comment created
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        type: string
                                        example: '67890'
                                    userId:
                                        type: string
                                        example: '12345'
                                    publicationId:
                                        type: string
                                        example: '54321'
                                    content:
                                        type: string
                                        example: 'This is a comment'
                                    timestamp:
                                        type: string
                                        format: date-time
                                        example: '2024-10-30T13:39:08.348Z'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /publications/{id}/comments/{commentId}:
        delete:
            summary: Allows to delete a comment
            tags:
                - Comments
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
                - in: path
                  name: commentId
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique du commentaire
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Comment deleted
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Comment successfully deleted'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /friends:
        get:
            summary: Allows to see a list of your friends
            tags:
                - Friends
            parameters:
                - in: query
                  name: page
                  required: false
                  schema:
                      type: integer
                      example: 1
                  description: Numéro de page des résultats.
                - in: query
                  name: pageSize
                  required: false
                  schema:
                      type: integer
                      example: 10
                  description: Nombre d'éléments par page.
                - in: query
                  name: status
                  required: false
                  schema:
                      type: string
                      enum: ['pending', 'accepted']
                      description: Statut de l'amitié.
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Friends list retrieved
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        _id:
                                            type: string
                                            example: '12345'
                                        users:
                                            type: array
                                            items:
                                                type: object
                                                properties:
                                                    _id:
                                                        type: string
                                                        example: '67890'
                                                    name:
                                                        type: string
                                                        example: 'John Doe'
                                                    email:
                                                        type: string
                                                        format: email
                                                        example: 'john.doe@email.com'
                                                    profilePictureUrl:
                                                        type: string
                                                        example: 'default.jpg'
                                        status:
                                            type: string
                                            enum: ['pending', 'accepted']
                                            example: 'pending'
                                        requester:
                                            type: string
                                            example: '67890'
                                        createdAt:
                                            type: string
                                            format: date-time
                                            example: '2024-10-30T13:39:08.348Z'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
        post:
            summary: Allows to create a friendship
            tags:
                - Friends
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                _id:
                                    type: string
                                    example: '6734ba8ad862f2bfa68236ac'
                                users:
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            _id:
                                                type: string
                                                example: '6722368d79c78a9de1e25c56'
                                            name:
                                                type: string
                                                example: 'Jérémie'
                                            email:
                                                type: string
                                                format: email
                                                example: 'zurfluh.jeremie@gmail.com'
                                            role:
                                                type: string
                                                example: 'user'
                                            profilePictureUrl:
                                                type: string
                                                example: 'default.jpg'
                                            createdAt:
                                                type: string
                                                format: date-time
                                                example: '2024-10-30T13:37:17.332Z'
                                            updatedAt:
                                                type: string
                                                format: date-time
                                                example: '2024-10-30T13:37:17.334Z'
                                createdAt:
                                    type: string
                                    format: date-time
                                    example: '2024-11-13T14:41:14.810Z'
            security:
                - bearerAuth: []
            responses:
                '201':
                    description: Friendship created
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        type: string
                                        example: '12345'
                                    users:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                _id:
                                                    type: string
                                                    example: '67890'
                                                name:
                                                    type: string
                                                    example: 'John Doe'
                                                email:
                                                    type: string
                                                    format: email
                                                    example: 'john.doe@email.com'
                                                profilePictureUrl:
                                                    type: string
                                                    example: 'default.jpg'
                                    status:
                                        type: string
                                        enum: ['pending', 'accepted']
                                        example: 'pending'
                                    requester:
                                        type: string
                                        example: '67890'
                                    createdAt:
                                        type: string
                                        format: date-time
                                        example: '2024-10-30T13:39:08.348Z'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity
    /friends/{friendshipId}:
        delete:
            summary: Allows to delete a friend
            tags:
                - Friends
            parameters:
                - in: path
                  name: friendshipId
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de l'amitié
            security:
                - bearerAuth: []
            responses:
                '204':
                    description: Friend deleted
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Friend successfully deleted'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '404':
                    description: Friend not found
        patch:
            summary: Allows to update the status of a friendship
            tags:
                - Friends
            parameters:
                - in: path
                  name: friendshipId
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de l'amitié
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                status:
                                    type: string
                                    enum: ['accepted', 'denied']
                                    example: 'accepted'
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Friendship status updated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        type: string
                                        example: '12345'
                                    users:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                _id:
                                                    type: string
                                                    example: '67890'
                                                name:
                                                    type: string
                                                    example: 'John Doe'
                                                email:
                                                    type: string
                                                    format: email
                                                    example: 'john.doe@email.com'
                                                profilePictureUrl:
                                                    type: string
                                                    example: 'default.jpg'
                                    status:
                                        type: string
                                        enum: ['pending', 'accepted']
                                        example: 'accepted'
                                    requester:
                                        type: string
                                        example: '67890'
                                    createdAt:
                                        type: string
                                        format: date-time
                                        example: '2024-10-30T13:39:08.348Z'
                '204':
                    description: Friendship request denied
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '404':
                    description: Friend request not found

    /status:
        get:
            summary: Return the API status
            tags:
                - Status
            responses:
                '200':
                    description: API status retrieved
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: 'ok'
                '400':
                    description: Bad request
                '422':
                    description: Unprocessable entity
                '401':
                    description: Unauthorized

components:
    schemas:
        User:
            type: object
            properties:
                _id:
                    type: string
                    example: '672236fc79c78a9de1e25c59'
                    description: Identifiant unique de l'utilisateur.
                name:
                    type: string
                    example: 'John Doe'
                    description: Nom de l'utilisateur.
                email:
                    type: string
                    format: email
                    example: 'john.doe@email.com'
                role:
                    type: string
                    example: 'user'
                profilePictureUrl:
                    type: string
                    example: 'default.jpg'
                    description: URL de la photo de profil.
                createdAt:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.348Z'
                updatedAt:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.349Z'
            required:
                - _id
                - name
                - email
                - role
                - profilePictureUrl
                - createdAt
                - updatedAt
        UserData:
            type: object
            properties:
                name:
                    type: string
                    example: 'John Doe'
                    description: Nom de l'utilisateur.
                email:
                    type: string
                    format: email
                    example: 'john.doe@email.com'
                password:
                    type: string
                    format: password
            required:
                - name
                - email
                - password

    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
