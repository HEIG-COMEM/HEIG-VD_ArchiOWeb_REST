openapi: 3.0.3
info:
   title: REST API
   version: 1.0.0
   description: >-
      **A demonstration REST API developed with
      [Express](https://expressjs.com).**
servers:
   - url: "http://localhost:3000/api/v1"

tags:
   - name: Auth
     description: Authentication management
   - name: Users
     description: User management

paths:
   /auth/signup:
      post:
         summary: Register a new user
         tags:
            - Auth
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     $ref: "#/components/schemas/UserData"
         responses:
            "201":
               description: User created
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/User"
            "400":
               description: Bad request
            "409":
               description: User already exists
   /auth/login:
      post:
         summary: Authenticate a user
         tags:
            - Auth
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        email:
                           type: string
                           format: email
                        password:
                           type: string
                           format: password
                     required:
                        - email
                        - password
         responses:
            "200":
               description: User authenticated
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           token:
                              type: string
            "400":
               description: Bad request
            "401":
               description: Unauthorized
   /auth/user:
      get:
         summary: Get the authenticated user
         tags:
            - Auth
         security:
            - bearerAuth: []
         responses:
            "200":
               description: User found
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/User"
            "401":
               description: Unauthorized
   /users:
      get:
         summary: Get Users
         tags:
            - Users
         description: Permet d'afficher les utilisateurs disponibles.
         parameters:
            - in: query
              name: page
              required: false
              schema:
                 type: integer
                 example: 1
              description: Numéro de page des résultats.
            - in: query
              name: pageSize
              required: false
              schema:
                 type: integer
                 example: 10
              description: Nombre d'éléments par page.
         responses:
            "200":
               description: Liste des utilisateurs
               content:
                  application/json:
                     schema:
                        type: array
                        items:
                           $ref: "#/components/schemas/User"
            "400":
               description: Bad request
            "401":
               description: Unauthorized
            "422":
               description: Unprocessable entity 
   /user/{id}:
      get:
         summary: Get the user information
         tags:
            - Users
         parameters:
            - in: path
              name: id
              required: true
              schema:
                 type: string
                 description: Unique identifier of the user
         responses:
            "200":
               description: User found
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/User"
            "401":
               description: Unauthorized 
            "404":
               description: User not found

components:
   schemas:
      User:
         type: object
         properties:
            _id:
               type: string
               example: "672236fc79c78a9de1e25c59"
               description: Identifiant unique de l'utilisateur.
            name:
               type: string
               example: "John Doe"
               description: Nom de l'utilisateur.
            email:
               type: string
               format: email
               example: "john.doe@email.com"
            role:
               type: string
               example: "user"
            profilePictureUrl:
               type: string
               example: "default.jpg"
               description: URL de la photo de profil.
            createdAt:
               type: string
               format: date-time
               example: "2024-10-30T13:39:08.348Z"
            updatedAt:
               type: string
               format: date-time
               example: "2024-10-30T13:39:08.349Z"
         required:
            - _id
            - name
            - email
            - role
            - profilePictureUrl
            - createdAt
            - updatedAt
      UserData:
         type: object
         properties:
            name:
               type: string
               example: "John Doe"
               description: Nom de l'utilisateur.
            email:
               type: string
               format: email
               example: "john.doe@email.com"
            password:
               type: string
               format: password
         required:
            - name
            - email
            - password

   securitySchemes:
      bearerAuth:
         type: http
         scheme: bearer
         bearerFormat: JWT
