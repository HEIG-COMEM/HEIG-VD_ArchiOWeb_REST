openapi: 3.0.3
info:
   title: REST API
   version: 1.0.0
   description: >-
      **A demonstration REST API developed with
      [Express](https://expressjs.com).**
servers:
   - url: "http://localhost:3000/api/v1"

tags:
   - name: Auth
     description: Authentication management

paths:
   /auth/signup:
      post:
         summary: Register a new user
         tags:
            - Auth
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     $ref: "#/components/schemas/UserData"
         responses:
            "201":
               description: User created
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/User"
            "400":
               description: Bad request
            "409":
               description: User already exists
            "500":
               description: Internal server error
   /auth/login:
      post:
         summary: Authenticate a user
         tags:
            - Auth
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        email:
                           type: string
                           format: email
                        password:
                           type: string
                           format: password
                     required:
                        - email
                        - password
         responses:
            "200":
               description: User authenticated
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           token:
                              type: string
            "400":
               description: Bad request
            "401":
               description: Unauthorized
            "500":
               description: Internal server error
   /auth/user:
      get:
         summary: Get the authenticated user
         tags:
            - Auth
         security:
            - bearerAuth: []
         responses:
            "200":
               description: User found
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/User"
            "401":
               description: Unauthorized
            "500":
               description: Internal server error
components:
   schemas:
      User:
         type: object
         properties:
            _id:
               type: string
               example: 5f7f1b7b7f3b3b0b3c7b3f7f
               description: The unique identifier for the user
            name:
               type: string
               example: John Doe
               descsription: User name
            email:
               type: string
               format: email
               example: john.doe@email.com
            password:
               type: string
               format: password
            createdAt:
               type: string
               format: date-time
               example: 2020-10-08T12:00:00Z
               description: The date and time the user was created
            updatedAt:
               type: string
               format: date-time
               example: 2020-10-08T12:00:00Z
               description: The date and time the user was last updated
         required:
            - _id
            - name
            - email
            - password
            - createdAt
            - updatedAt
      UserData:
         type: object
         properties:
            name:
               type: string
               example: John Doe
               descsription: User name
            email:
               type: string
               format: email
               example: john.doe@email.com
            password:
               type: string
               format: password
         required:
            - name
            - email
            - password

   securitySchemes:
      bearerAuth:
         type: http
         scheme: bearer
         bearerFormat: JWT
