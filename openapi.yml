openapi: 3.0.3
info:
    title: REST API
    version: 1.0.0
    description: >-
        **A demonstration REST API developed with
        [Express](https://expressjs.com).**
servers:
    - url: 'http://localhost:3000/api/v1'

tags:
    - name: Auth
      description: Authentication management
    - name: Users
      description: User management
    - name: Publications
      description: Publications management
    - name: Comments
      description: Comments management
    - name: Friends
      description: Friends management
    - name: Admin
      description: Admin management
    - name: Status
      description: API status

paths:
    /auth/signup:
        post:
            summary: Register a new user
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserData'
            responses:
                '201':
                    description: User created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '409':
                    description: User already exists
    /auth/login:
        post:
            summary: Authenticate a user
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                    format: password
                            required:
                                - email
                                - password
            responses:
                '200':
                    description: User authenticated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
    /auth/user:
        get:
            summary: Get the authenticated user
            tags:
                - Auth
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized
    /users:
        get:
            summary: Get Users
            tags:
                - Users
            description: Permet d'afficher les utilisateurs disponibles.
            parameters:
                - in: query
                  name: page
                  required: false
                  schema:
                      type: integer
                      example: 1
                  description: Numéro de page des résultats.
                - in: query
                  name: pageSize
                  required: false
                  schema:
                      type: integer
                      example: 10
                  description: Nombre d'éléments par page.
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Liste des utilisateurs
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
    /users/{id}:
        get:
            summary: Get the user information
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Unique identifier of the user
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized
                '404':
                    description: User not found
        put:
            summary: Allows to modify the user giving every informations
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: UUID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserDataPut'
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity
        patch:
            summary: Allows to modify a user giving only the informations we want to change
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: UUID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity
        delete:
            summary: Allows to delete a user
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: UUID
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User deleted
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '404':
                    description: User not found
                '422':
                    description: Unprocessable entity
    /users/{id}/stats:
        get:
            summary: Get user statistics
            tags:
              - Users
            parameters:
              - in: path
                name: id
                required: true
                schema:
                    type: string
                    description: Identifiant unique de l'utilisateur
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User statistics retrieved
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserStats'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized

    /publications:
        get:
            summary: Get publications
            tags:
                - Publications
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Publications retrieved
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Publication'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

        post:
            summary: Allows to create a new publication
            tags:
                - Publications
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PublicationData'
            security:
                - bearerAuth: []
            responses:
                '201':
                    description: Publication created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Publication'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /publications/{id}:
        get:
            summary: Get the publications informations
            tags:
                - Publications
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Publication retrieved
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Publication'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '404':
                    description: Publication not found
                '422':
                    description: Unprocessable entity

        delete:
            summary: Allows to delete a publication
            tags:
                - Publications
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Publication deleted
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /publications/{id}/comments:
        get:
            summary: Allows to get all the comments under a publication
            tags:
                - Comments
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Comments retrieved
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Comment'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

        post:
            summary: Allows to create a new comment
            tags:
                - Comments
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CommentData'
            security:
                - bearerAuth: []
            responses:
                '201':
                    description: Comment created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /publications/{id}/comments/{commentId}:
        delete:
            summary: Allows to delete a comment
            tags:
                - Comments
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de la publication
                - in: path
                  name: commentId
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique du commentaire
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Comment deleted
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /friends:
        get:
            summary: Allows to see a list of your friends
            tags:
                - Friends
            parameters:
                - in: query
                  name: page
                  required: false
                  schema:
                      type: integer
                      example: 1
                  description: Numéro de page des résultats.
                - in: query
                  name: pageSize
                  required: false
                  schema:
                      type: integer
                      example: 10
                  description: Nombre d'éléments par page.
                - in: query
                  name: status
                  required: false
                  schema:
                      type: string
                      enum: ['pending', 'accepted']
                      description: Statut de l'amitié.
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Friends list retrieved
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Friend'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized

        post:
            summary: Allows to create a friendship
            tags:
                - Friends
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/FriendData'
            security:
                - bearerAuth: []
            responses:
                '201':
                    description: Friendship created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Friend'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '422':
                    description: Unprocessable entity

    /friends/{friendshipId}:
        delete:
            summary: Allows to delete a friend
            tags:
                - Friends
            parameters:
                - in: path
                  name: friendshipId
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de l'amitié
            security:
                - bearerAuth: []
            responses:
                '204':
                    description: Friend deleted
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '404':
                    description: Friend not found
        patch:
            summary: Allows to update the status of a friendship
            tags:
                - Friends
            parameters:
                - in: path
                  name: friendshipId
                  required: true
                  schema:
                      type: string
                      description: Identifiant unique de l'amitié
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/FriendStatus'
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Friendship status updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Friend'
                '204':
                    description: Friendship request denied
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '404':
                    description: Friend request not found

    /admin/notifications:
        post:
            summary: Send a BeReal notification
            tags:
                - Admin
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Notification sent
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Notification'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized
                '403':
                    description: Forbidden
                '422':
                    description: Unprocessable entity
    /status:
        get:
            summary: Return the API status
            tags:
                - Status
            responses:
                '200':
                    description: API status retrieved
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
                '400':
                    description: Bad request
                '401':
                    description: Unauthorized

components:
    schemas:
        User:
            type: object
            properties:
                _id:
                    type: string
                    example: '672236fc79c78a9de1e25c59'
                    description: UUID
                name:
                    type: string
                    example: 'John Doe'
                    description: Name of the user.
                email:
                    type: string
                    format: email
                    example: 'john.doe@email.com'
                role:
                    type: string
                    example: 'user'
                profilePictureUrl:
                    oneOf:
                        - type: string
                          example: 'default'
                        - type: string
                          format: binary
                    description: 'Un fichier à envoyer au serveur'
                createdAt:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.348Z'
                updatedAt:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.349Z'
            required:
                - _id
                - name
                - email
                - role
                - profilePictureUrl
                - createdAt
                - updatedAt
        UserData:
            type: object
            properties:
                name:
                    type: string
                    example: 'John Doe'
                    description: Name of the user.
                email:
                    type: string
                    format: email
                    example: 'john.doe@email.com'
                password:
                    type: string
                    format: password
            required:
                - name
                - email
                - password
        UserDataPut:
            type: object
            properties:
                name:
                    type: string
                    example: 'John Doe'
                    description: Name of the user.
                email:
                    type: string
                    format: email
                    example: 'john.doe@email.com'
                password:
                    type: string
                    format: password
                profilePictureUrl:
                    oneOf:
                        - type: string
                          example: 'default'
                        - type: string
                          format: binary
                    description: 'Un fichier à envoyer au serveur'
            required:
                - name
                - email
                - password
                - profilePictureUrl
        UserStats:
            type: object
            properties:
              name:
                type: string
                example: 'John Doe'
              email:
                type: string
                format: email
                example: 'john.doe@email.com'
              publications:
                type: integer
                example: 5
                description: Number of publications
              friends:
                type: integer
                example: 3
                description: Number of friends
              comments:
                type: integer
                example: 10
                description: Number of comments
        Point:
            type: object
            properties:
                type:
                    type: string
                    enum: ['Point']
                    example: 'Point'
                coordinates:
                    type: array
                    items:
                        type: number
                    example: [2.3522, 48.8566]
                    description: Longitude et latitude de la publication
        Publication:
            type: object
            properties:
                _id:
                    type: string
                    example: '6756e41017bf26129f0ac112'
                frontCamera:
                    type: object
                    properties:
                        url:
                            type: string
                            format: uri
                            example: 'https://example.com/front.jpg'
                        id:
                            type: string
                            example: 'frontCameraId'
                backCamera:
                    type: object
                    properties:
                        url:
                            type: string
                            format: uri
                            example: 'https://example.com/back.jpg'
                        id:
                            type: string
                            example: 'backCameraId'
                location:
                    $ref: '#/components/schemas/Point'
                user:
                    type: string
                    example: '67890'
                createdAt:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.348Z'
                updatedAt:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.349Z'
        PublicationData:
            type: object
            properties:
                frontCamera:
                    type: string
                    format: uri
                    example: 'https://example.com/front.jpg'
                    description: URL of the image taken with the front camera
                backCamera:
                    type: string
                    format: uri
                    example: 'https://example.com/back.jpg'
                    description: URL of the image taken with the back camera
                location:
                    $ref: '#/components/schemas/Point'
            required:
                - frontCamera
                - backCamera
                - location
        Comment:
            type: object
            properties:
                _id:
                    type: string
                    example: '6756e41017bf26129f0ac112'
                userId:
                    type: string
                    example: 'default'
                publicationId:
                    type: string
                    example: '54321'
                content:
                    type: string
                    example: 'This is a comment'
                timestamp:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.348Z'
        CommentData:
            type: object
            properties:
                content:
                    type: string
                    example: 'This is a comment'
            required:
                - content
        Friend:
            type: object
            properties:
                _id:
                    type: string
                    example: '6756e41017bf26129f0ac112'
                users:
                    type: array
                    items:
                        type: object
                        properties:
                            _id:
                                type: string
                                example: '6756e41017bf26129f0ac112'
                            name:
                                type: string
                                example: 'John Doe'
                            email:
                                type: string
                                format: email
                                example: 'john.doe@email.com'
                            profilePictureUrl:
                                oneOf:
                                    - type: string
                                      example: 'default'
                                    - type: string
                                      format: binary
                                description: 'Un fichier à envoyer au serveur'

                status:
                    type: string
                    enum: ['pending', 'accepted']
                    example: 'pending'
                requester:
                    type: string
                    example: '67890'
                createdAt:
                    type: string
                    format: date-time
                    example: '2024-10-30T13:39:08.348Z'
        FriendData:
            type: object
            properties:
                friendId:
                    type: string
                    example: '67890'
            required:
                - friendId
        FriendStatus:
            type: object
            properties:
                status:
                    type: string
                    enum: ['accepted', 'denied']
                    example: 'accepted'
            required:
                - status
        Message:
            type: object
            properties:
                message:
                    type: string
                    example: 'Friend successfully deleted'
        Notification:
            type: object
            properties:
                content:
                    type: string
                    example: 'Time to be real'
                type:
                    type: string
                    example: 'bereal'
                _id:
                    type: string
                    example: '674838e543fbbe915a8a93dc'
                sentAt:
                    type: string
                    format: date-time
                    example: '2024-11-28T09:33:25.815Z'
                oneSignalNotificationId:
                    type: string
                    example: '12345'
